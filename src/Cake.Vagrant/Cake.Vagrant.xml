<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Vagrant</name>
    </assembly>
    <members>
        <member name="T:Cake.Vagrant.Commands.VagrantCommandRunner">
            <summary>
                Base class for Vagrant subcommands
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Commands.VagrantCommandRunner.Settings">
            <summary>
                Settings for invocation of the Vagrant CLI
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Commands.VagrantCommandRunner.Log">
            <summary>
                Logging output
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Commands.VagrantCommandRunner.Runner">
            <summary>
                Action to trigger invocation of the CLI
            </summary>
        </member>
        <member name="T:Cake.Vagrant.Commands.VagrantPluginRunner">
            <summary>
                Wrapper around the <c>vagrant plugin</c> subcommands
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantPluginRunner.#ctor(Cake.Core.Diagnostics.ICakeLog,System.Action{Cake.Vagrant.VagrantSettings,Cake.Core.IO.ProcessArgumentBuilder},Cake.Vagrant.VagrantSettings)">
            <summary>
                Creates a new instance of the <see cref="T:Cake.Vagrant.Commands.VagrantPluginRunner" /> class
            </summary>
            <param name="log">Logging output</param>
            <param name="runCallback">Action to trigger invocation of the CLI</param>
            <param name="settings">Settings for invocation of the Vagrant CLI</param>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantPluginRunner.Install(System.String,System.Action{Cake.Vagrant.Settings.VagrantPluginInstallSettings})">
            <summary>
                This installs a plugin with the given name or file path.
            </summary>
            <remarks>If the name is not a path to a file, then the plugin is installed from remote repositories, usually RubyGems.</remarks>
            <param name="name">Name or path of the plugin to install</param>
            <param name="configure">Optional settings to control the installation process</param>
            <example>
                <code>
            <![CDATA[
             Vagrant.Plugin.Install("plugin", 
                s => s.CleanFirst()
                        .FromSource("http://source")
                        .SetEntryPoint("main.sh"));
            ]]></code>
            </example>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantPluginRunner.Install(System.Collections.Generic.IEnumerable{System.String},System.Action{Cake.Vagrant.Settings.VagrantPluginInstallSettings})">
            <summary>
                This installs multiple plugins at the same time with the given names or paths
            </summary>
            <param name="names">A list of names of plugins to install</param>
            <param name="configure">Optional settings to control the installation process</param>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantPluginRunner.Uninstall(System.String[])">
            <summary>
                This uninstalls the plugin with the given name. If multiple plugins are given, multiple plugins will be
                uninstalled.
            </summary>
            <remarks>Any dependencies of the plugin will also be uninstalled assuming no other plugin needs them.</remarks>
            <param name="names">Names of the plugins to uninstall</param>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantPluginRunner.Update(System.String)">
            <summary>
                This updates the plugins that are installed within Vagrant.
            </summary>
            <remarks>
                If you specified version constraints when installing the plugin, this command will respect those constraints.
                If you want to change a version constraint, re-install the plugin using
                <see cref="M:Cake.Vagrant.Commands.VagrantPluginRunner.Install(System.String,System.Action{Cake.Vagrant.Settings.VagrantPluginInstallSettings})" />
            </remarks>
            <param name="name">If a name is specified, only that single plugin will be updated</param>
        </member>
        <member name="T:Cake.Vagrant.Commands.VagrantSnapshotRunner">
            <summary>
                Wrapper around the <c>vagrant snapshot</c> subcommands
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.#ctor(Cake.Core.Diagnostics.ICakeLog,System.Action{Cake.Vagrant.VagrantSettings,Cake.Core.IO.ProcessArgumentBuilder},Cake.Vagrant.VagrantSettings)">
            <summary>
                Creates a new instance of the <see cref="T:Cake.Vagrant.Commands.VagrantSnapshotRunner" /> class
            </summary>
            <param name="log">Logging output</param>
            <param name="runCallback">Action to trigger invocation of the CLI</param>
            <param name="settings">Settings for invocation of the Vagrant CLI</param>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Push">
            <summary>
                This takes a snapshot and pushes it onto the snapshot stack.
            </summary>
            <remarks>
                <para>This is a shorthand for <see cref="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Save(System.String)" /> where you do not need to specify a name.</para>
                <para>
                    Warning: If you are using <see cref="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Push" /> and <see cref="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Pop(System.Action{Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings})" />, avoid using <see cref="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Save(System.String)" /> and
                    <see cref="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Restore(System.String,System.Action{Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings})" /> which are unsafe to mix.
                </para>
            </remarks>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Pop(System.Action{Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings})">
            <summary>
                This command is the inverse of <see cref="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Push" />: it will restore the pushed state.
            </summary>
            <param name="configure">Optional settings to control the restore</param>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Save(System.String)">
            <summary>
                This command saves a new named snapshot.
            </summary>
            <remarks>If this command is used, the <see cref="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Push" /> and <see cref="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Pop(System.Action{Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings})" /> subcommands cannot be safely used.</remarks>
            <param name="name">Name of the snapshot</param>
            <example>
                <code><![CDATA[
            Vagrant.Snapshot.Save("CakeScript");
            ]]></code>
            </example>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Restore(System.String,System.Action{Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings})">
            <summary>
                This command restores the named snapshot.
            </summary>
            <param name="name">Name of the snapshot to restore</param>
            <param name="configure">Optional settings to control the restore</param>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantSnapshotRunner.Delete(System.String)">
            <summary>
                This command will delete the named snapshot.
            </summary>
            <param name="name">Name of the snapshot to delete</param>
        </member>
        <member name="T:Cake.Vagrant.Commands.VagrantBoxRunner">
            <summary>
                Wrapper around the <c>vagrant box</c> subcommands
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantBoxRunner.Add(System.String,System.Action{Cake.Vagrant.Settings.VagrantBoxAddSettings})">
            <summary>
                This adds a box with the given address to Vagrant.
            </summary>
            <param name="address">Can be: shorthand name from Atlas, file path or URL to a box either locally or in a catalog</param>
            <param name="configure">Optional settings to use when adding the box</param>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantBoxRunner.List">
            <summary>
                Lists all installed boxes
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantBoxRunner.Outdated(System.Boolean)">
            <summary>
                This command tells you whether or not the box you are using in your current Vagrant environment is outdated.
            </summary>
            <param name="global">If <c>true</c>, every installed box will be checked for updates.</param>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantBoxRunner.Remove(System.String,System.Action{Cake.Vagrant.Settings.VagrantBoxRemoveSettings})">
            <summary>
                This command removes a box from Vagrant that matches the given name.
            </summary>
            <remarks>
                If a box has multiple providers, the exact provider must be specified with the
                <see cref="P:Cake.Vagrant.Settings.VagrantBoxRemoveSettings.Provider" /> property.
            </remarks>
            <param name="name">Name of the box to remove</param>
            <param name="configure">Optional settings for removing a box.</param>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantBoxRunner.Repackage(System.String,System.String,System.String)">
            <summary>
                This command repackages the given box and puts it in the current directory so you can redistribute it.
            </summary>
            <remarks>
                This command is useful for reclaiming a *.box file from an installed Vagrant box.
            </remarks>
            <param name="name">Name of the machine to repackage</param>
            <param name="provider">Name of the provider (from <see cref="M:Cake.Vagrant.Commands.VagrantBoxRunner.List" />)</param>
            <param name="version">Version to repackage (from <see cref="M:Cake.Vagrant.Commands.VagrantBoxRunner.List" />)</param>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantBoxRunner.Update(System.Action{Cake.Vagrant.Settings.VagrantBoxUpdateSettings})">
            <summary>
                This command updates the box for the current Vagrant environment if there are updates available
            </summary>
            <remarks>
                Note that updating the box will not update an already-running Vagrant machine. To reflect the changes in the box,
                you will have to destroy and bring back up the Vagrant machine.
            </remarks>
            <param name="configure">Optional settings to use for updating</param>
        </member>
        <member name="T:Cake.Vagrant.Commands.VagrantDockerRunner">
            <summary>
                Wrapper around the <c>vagrant docker</c> subcommands
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantDockerRunner.#ctor(Cake.Core.Diagnostics.ICakeLog,System.Action{Cake.Vagrant.VagrantSettings,Cake.Core.IO.ProcessArgumentBuilder},Cake.Vagrant.VagrantSettings)">
            <summary>
                Gets a new instance of the <see cref="T:Cake.Vagrant.Commands.VagrantDockerRunner" /> class
            </summary>
            <param name="log">Logging output</param>
            <param name="runCallback">Action to trigger invocation of the CLI</param>
            <param name="settings">Settings for invocation of the Vagrant CLI</param>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantDockerRunner.Exec(System.String,System.String)">
            <summary>
                Can be used to run one-off commands against a Docker container that is currently running
            </summary>
            <remarks>If the container is not running, an error will be returned.</remarks>
            <param name="name">Name of the container to run against</param>
            <param name="command">Command to execute. This will NOT be quoted.</param>
        </member>
        <member name="M:Cake.Vagrant.Commands.VagrantDockerRunner.Run(System.String,System.String)">
            <summary>
                Can be used to run one-off commands against a Docker container that is currently running
            </summary>
            <remarks>If the container is not running, an error will be returned.</remarks>
            <param name="name">Name of the container to run against</param>
            <param name="command">Command to execute. This will NOT be quoted.</param>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantBoxAddSettings">
            <summary>
                Additional settings for <c>vagrant box add</c> command
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.Version">
            <summary>
                The version of the box you want to add.
            </summary>
            <remarks>By default, the latest version will be added</remarks>
            <value>
                Can be an exact version number such as "1.2.3" or it can be a set of version constraints like "&gt;= 1.0, &lt;
                2.0"
            </value>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.CACertificate">
            <summary>
                The certificate for the CA used to verify the peer. This should be used if the remote end does not use a standard
                root CA.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.CAPath">
            <summary>
                The certificate directory for the CA used to verify the peer. This should be used if the remote end does not use a
                standard root CA.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.CertificatePath">
            <summary>
                A client certificate to use when downloading the box, if necessary.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.Clean">
            <summary>
                Gets or sets a value indicating whether to clean any existing temporary files before downloading
            </summary>
            <remarks>
                This is useful if you do not want Vagrant to resume a download from a previous point, perhaps because the
                contents changed.
            </remarks>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.Force">
            <summary>
                When present, the box will be downloaded and overwrite any existing box with this name.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.Insecure">
            <summary>
                When present, SSL certificates will not be verified if the URL is an HTTPS URL.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.Provider">
            <summary>
                If given, Vagrant will verify the box you are adding is for the given provider.
            </summary>
            <remarks>
                By default, Vagrant automatically detects the proper provider to use.
            </remarks>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxAddSettings.GetToolArguments">
            <summary>
                Gets the command arguments corresponding to the specified settings
            </summary>
            <returns>An action to add required command arguments</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantBoxAddSettingsExtensions">
            <summary>
                Fluent extension methods for the <see cref="T:Cake.Vagrant.Settings.VagrantBoxAddSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxAddSettingsExtensions.ConstrainVersion(Cake.Vagrant.Settings.VagrantBoxAddSettings,System.String)">
            <summary>
                Sets the version or version constraint to use when downloading the box
            </summary>
            <param name="settings">The settings</param>
            <param name="version">A version constraint to use (see <see cref="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.Version" />)</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxAddSettingsExtensions.UseCertificateAuthority(Cake.Vagrant.Settings.VagrantBoxAddSettings,Cake.Core.IO.IDirectory)">
            <summary>
                Sets the <see cref="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.CAPath" /> property for the CA used to verify the peer
            </summary>
            <param name="settings">The settings</param>
            <param name="caPath">The certificate directory to use</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxAddSettingsExtensions.UseCertificateAuthority(Cake.Vagrant.Settings.VagrantBoxAddSettings,Cake.Core.IO.FilePath)">
            <summary>
                Sets the <see cref="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.CACertificate" /> property for the CA certificate used to verify the peer
            </summary>
            <param name="settings">The settings</param>
            <param name="certPath">The certificate file to use</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxAddSettingsExtensions.WithClientCertificate(Cake.Vagrant.Settings.VagrantBoxAddSettings,Cake.Core.IO.FilePath)">
            <summary>
                Sets the <see cref="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.CertificatePath" /> property for a client certificate to use when
                downloading the box, if necessary.
            </summary>
            <param name="settings">The settings</param>
            <param name="certFile">Path to the cert file to use</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxAddSettingsExtensions.AllowInsecure(Cake.Vagrant.Settings.VagrantBoxAddSettings,System.Boolean)">
            <summary>
                Enables unverified/untrusted SSL certificates when using HTTPS URLs.
            </summary>
            <param name="settings">The settings</param>
            <param name="allow">Whether to allow insecure certs. Defaults to true</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxAddSettingsExtensions.UseProvider(Cake.Vagrant.Settings.VagrantBoxAddSettings,System.String)">
            <summary>
                Requests a specific provider as per the <see cref="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.Provider" /> property
            </summary>
            <param name="settings">The settings</param>
            <param name="provider">The requested provider</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxAddSettingsExtensions.Force(Cake.Vagrant.Settings.VagrantBoxAddSettings,System.Boolean)">
            <summary>
                Forces downloading and overwriting any box with the same name
            </summary>
            <param name="settings">The settings</param>
            <param name="force">Whether to force the download. Defaults to true.</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxAddSettingsExtensions.CleanFirst(Cake.Vagrant.Settings.VagrantBoxAddSettings,System.Boolean)">
            <summary>
                Enables cleaning any temporary or partial download files first.
            </summary>
            <param name="settings">The settings</param>
            <param name="clean">Whether to clean first. Defaults to true.</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantBoxRemoveSettings">
            <summary>
                Additional settings for the <c>vagrant box remove</c> command
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxRemoveSettings.RemoveAll">
            <summary>
                Remove all available versions of a box.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxRemoveSettings.Force">
            <summary>
                Forces removing the box even if an active Vagrant environment is using it.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxRemoveSettings.BoxVersion">
            <summary>
                Version of version constraints of the boxes to remove. See <see cref="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.Version" /> for more
                details.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxRemoveSettings.Provider">
            <summary>
                The provider-specific box to remove with the given name.
            </summary>
            <remarks>
                This is only required if a box is backed by multiple providers. If there is only a single provider, Vagrant will
                default to removing it.
            </remarks>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxRemoveSettings.GetToolArguments">
            <summary>
                Gets the command arguments corresponding to the specified settings
            </summary>
            <returns>An action to add required command arguments</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantBoxRemoveSettingsExtensions">
            <summary>
                Fluent extension methods for the <see cref="T:Cake.Vagrant.Settings.VagrantBoxRemoveSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxRemoveSettingsExtensions.ConstrainVersion(Cake.Vagrant.Settings.VagrantBoxRemoveSettings,System.String)">
            <summary>
                Sets the version constraint for the box to remove
            </summary>
            <remarks>See <see cref="P:Cake.Vagrant.Settings.VagrantBoxAddSettings.Version" /> for more information</remarks>
            <param name="settings">The settings</param>
            <param name="version">Version constraint to match against</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxRemoveSettingsExtensions.RemoveAll(Cake.Vagrant.Settings.VagrantBoxRemoveSettings)">
            <summary>
                Remove all available versions of a box.
            </summary>
            <param name="settings">The settings</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxRemoveSettingsExtensions.UseProvider(Cake.Vagrant.Settings.VagrantBoxRemoveSettings,System.String)">
            <summary>
                The provider-specific box to remove with the given name.
            </summary>
            <param name="settings">The settings</param>
            <param name="provider">The specific provider to remove</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxRemoveSettingsExtensions.Force(Cake.Vagrant.Settings.VagrantBoxRemoveSettings,System.Boolean)">
            <summary>
                Forces removing the box even if an active Vagrant environment is using it.
            </summary>
            <param name="settings">The settings</param>
            <param name="force"><c>true</c> to force removal. Defaults to <c>true</c></param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantBoxUpdateSettings">
            <summary>
                Additional settings for the <c>vagrant box update</c> command
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxUpdateSettings.BoxName">
            <summary>
                Name of a specific box to update.
            </summary>
            <remarks>If this flag is not specified, Vagrant will update the boxes for the active Vagrant environment.</remarks>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantBoxUpdateSettings.Provider">
            <summary>
                When <see cref="P:Cake.Vagrant.Settings.VagrantBoxUpdateSettings.BoxName" /> is present, this controls what provider-specific box to update.
            </summary>
            <remarks>This is not required unless the box has multiple providers.</remarks>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxUpdateSettings.GetToolArguments">
            <summary>
                Gets the command arguments corresponding to the specified settings
            </summary>
            <returns>An action to add required command arguments</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantBoxUpdateSettingsExtensions">
            <summary>
                Fluent extension methods for the <see cref="T:Cake.Vagrant.Settings.VagrantBoxUpdateSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxUpdateSettingsExtensions.UseProvider(Cake.Vagrant.Settings.VagrantBoxUpdateSettings,System.String)">
            <summary>
                Controls what provider-specific box to update
            </summary>
            <param name="settings">The settings</param>
            <param name="provider">The provider name to update</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantBoxUpdateSettingsExtensions.OnlyUpdate(Cake.Vagrant.Settings.VagrantBoxUpdateSettings,System.String)">
            <summary>
                Set the name of a specific box to update
            </summary>
            <remarks>When using this option, the box does not need to be part of the active environment</remarks>
            <param name="settings">The settings</param>
            <param name="name">Name of the box to update</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantInitSettings">
            <summary>
                Additional settings for the <c>vagrant init</c> command
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantInitSettings.Force">
            <summary>
                Gets or sets a value indicating whether to force initialization, even if an existing Vagrantfile is found
            </summary>
            <value>If <c>true</c>, this command will overwite any existing Vagrantfile</value>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantInitSettings.Minimal">
            <summary>
                This enables the creation of a more minimal Vagrantfile that does not contain the instructional comments the normal
                Vagrantfile contains
            </summary>
            <value><c>true</c> to create a minimal file. Defaults to <c>false</c></value>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantInitSettings.OutputFile">
            <summary>
                Gets or sets the file to output the Vagrantfile to
            </summary>
            <value>File path for the new Vagrantfile. If this is "-", the Vagrantfile will be sent to stdout.</value>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantInitSettings.VersionConstraint">
            <summary>
                The box version or box version constraint to add to the Vagrantfile
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantInitSettings.GetToolArguments">
            <summary>
                Gets the command arguments corresponding to the specified settings
            </summary>
            <returns>An action to add required command arguments</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantInitSettingsExtensions">
            <summary>
                Fluent extension methods for the <see cref="T:Cake.Vagrant.Settings.VagrantInitSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantInitSettingsExtensions.Force(Cake.Vagrant.Settings.VagrantInitSettings,System.Boolean)">
            <summary>
                Enables overwriting any existing Vagrantfile
            </summary>
            <param name="settings">Settings</param>
            <param name="force">Where to enable <c>--force</c></param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantInitSettingsExtensions.CreateMinimal(Cake.Vagrant.Settings.VagrantInitSettings)">
            <summary>
                Enables creation of a more minimal Vagrantfile without instructional comments
            </summary>
            <param name="settings">The settings</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantInitSettingsExtensions.OutputToFile(Cake.Vagrant.Settings.VagrantInitSettings,Cake.Core.IO.FilePath)">
            <summary>
                Sets the <see cref="T:Cake.Core.IO.FilePath" /> to output the new Vagrantfile to
            </summary>
            <param name="settings">The settings</param>
            <param name="filePath">Desired path for the new Vagrantfile</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantInitSettingsExtensions.ConstrainVersion(Cake.Vagrant.Settings.VagrantInitSettings,System.String)">
            <summary>
                Sets the box version or box version constraint to add to the Vagrantfile
            </summary>
            <param name="settings">The settings</param>
            <param name="version">Box version or version constraint</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantPackageSettings">
            <summary>
                Additional settings for the <c>vagrant package</c> command
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantPackageSettings.BaseImageName">
            <summary>
                Name or UUID of a VirtualBox VM to package
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantPackageSettings.OutputFile">
            <summary>
                File name for the output package. Defaults to <c>package.box</c>
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantPackageSettings.AdditionalFilePaths">
            <summary>
                Additional files to be packaged with the box.
            </summary>
            <remarks>These can be used by a packaged <see cref="P:Cake.Vagrant.Settings.VagrantPackageSettings.VagrantFile" /> to perform additional tasks.</remarks>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantPackageSettings.VagrantFile">
            <summary>
                Packages a Vagrantfile with the box, that is loaded as part of the Vagrantfile load order when the resulting box is
                used.
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantPackageSettings.GetToolArguments">
            <summary>
                Gets the command arguments corresponding to the specified settings
            </summary>
            <returns>An action to add required command arguments</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantPackageSettingsExtensions">
            <summary>
                Fluent extension methods for the <see cref="T:Cake.Vagrant.Settings.VagrantPackageSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantPackageSettingsExtensions.UseBaseImage(Cake.Vagrant.Settings.VagrantPackageSettings,System.String)">
            <summary>
                Sets the base image to use when packaging the machine
            </summary>
            <param name="settings">The settings</param>
            <param name="id">VM name or UUID</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantPackageSettingsExtensions.OutputToFile(Cake.Vagrant.Settings.VagrantPackageSettings,Cake.Core.IO.FilePath)">
            <summary>
                Sets the filename for the package output
            </summary>
            <param name="settings">The settings</param>
            <param name="path">Path to output the package to</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantPackageSettingsExtensions.IncludeInPackage(Cake.Vagrant.Settings.VagrantPackageSettings,Cake.Core.IO.FilePath[])">
            <summary>
                Adds extra files to be included with the box
            </summary>
            <param name="settings">The settings</param>
            <param name="files">Collection of <see cref="T:Cake.Core.IO.FilePath" /> objects to add to the package</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantPackageSettingsExtensions.IncludeVagrantFile(Cake.Vagrant.Settings.VagrantPackageSettings,Cake.Core.IO.FilePath)">
            <summary>
                Includes an additional Vagrantfile with the packaged box
            </summary>
            <param name="settings">The settings</param>
            <param name="vagrantFile"><see cref="T:Cake.Core.IO.FilePath" /> for the Vagrantfile to include</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantPluginInstallSettings">
            <summary>
                Additional settings for the <c>vagrant plugin install</c> command.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantPluginInstallSettings.EntryPoint">
            <summary>
                If the plugin you are installing has another entrypoint, this flag can be used to specify it.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantPluginInstallSettings.CleanSources">
            <summary>
                Clears all sources that have been defined so far.
            </summary>
            <remarks>This is an advanced feature.</remarks>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantPluginInstallSettings.Source">
            <summary>
                Adds a source from which to fetch a plugin.
            </summary>
            <remarks>
                Note that this does not only affect the single plugin being installed, by all future plugin as well. This is a
                limitation of the underlying plugin installer Vagrant uses.
            </remarks>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantPluginInstallSettings.Version">
            <summary>
                The version of the plugin to install. By default, this command will install the latest version.
            </summary>
            <remarks>
                <para>
                    You can set it to a specific version, such as "1.2.3" or you can set it to a version constraint, such as "
                    &gt; 1.0.2". You can set it to a more complex constraint by comma-separating multiple constraints: "&gt; 1.0.2,
                    &lt; 1.1.0"
                </para>
            </remarks>
            <value>This will be automatically quoted</value>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantPluginInstallSettings.GetToolArguments">
            <summary>
                Gets the command arguments corresponding to the specified <see cref="T:Cake.Vagrant.IVagrantCommandSettings" />
            </summary>
            <returns>An action to add required command arguments</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantPluginInstallSettingsExtensions">
            <summary>
                Fluent extension methods for the <see cref="T:Cake.Vagrant.Settings.VagrantPluginInstallSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantPluginInstallSettingsExtensions.SetEntryPoint(Cake.Vagrant.Settings.VagrantPluginInstallSettings,System.String)">
            <summary>
                Sets the <see cref="P:Cake.Vagrant.Settings.VagrantPluginInstallSettings.EntryPoint" /> for a plugin.
            </summary>
            <param name="settings">The settings</param>
            <param name="entryPoint">The entry point for the plugin</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantPluginInstallSettingsExtensions.CleanFirst(Cake.Vagrant.Settings.VagrantPluginInstallSettings,System.Boolean)">
            <summary>
                Clears all sources that have been defined so far.
            </summary>
            <param name="settings">The settings</param>
            <param name="clean">Whether to clean sources first.</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantPluginInstallSettingsExtensions.FromSource(Cake.Vagrant.Settings.VagrantPluginInstallSettings,System.String)">
            <summary>
                Adds a source from which to fetch a plugin.
            </summary>
            <param name="settings">The settings</param>
            <param name="source">The source from which to install</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantPluginInstallSettingsExtensions.ConstrainVersion(Cake.Vagrant.Settings.VagrantPluginInstallSettings,System.String)">
            <summary>
                The version of the plugin to install.
            </summary>
            <param name="settings">The settings</param>
            <param name="version">
                The version or version constraint to use (as per
                <see cref="P:Cake.Vagrant.Settings.VagrantPluginInstallSettings.Version" />)
            </param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantPowerShellSettings">
            <summary>
                Additional settings for the <c>vagrant powershell</c> command.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantPowerShellSettings.Command">
            <summary>
                The command to run on your machine.
            </summary>
            <remarks>This is mandatory! Without it, script execution will block!</remarks>
            <value>This value will be quoted when invoked.</value>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantPowerShellSettings.GetToolArguments">
            <summary>
                Gets the command arguments corresponding to the specified settings
            </summary>
            <returns>An action to add required command arguments</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantPowerShellSettingsExtensions">
            <summary>
                Fluent extensions methods to the <see cref="T:Cake.Vagrant.Settings.VagrantPowerShellSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantPowerShellSettingsExtensions.RunCommand(Cake.Vagrant.Settings.VagrantPowerShellSettings,System.String)">
            <summary>
                Sets the command to run in the PowerShell session
            </summary>
            <param name="settings">The settings</param>
            <param name="command">REQUIRED: The command to run in the session.</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantProvisionerSettings">
            <summary>
                Additional settings for controlling provisioner execution
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantProvisionerSettings.RunProvisioners">
            <summary>
                Gets or sets a value controlling whether to run provisioners on reload.
            </summary>
            <remarks>Defaults to false</remarks>
            <value><c>true</c> to run provisioners, otherwise they will not be run.</value>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantProvisionerSettings.Provisioners">
            <summary>
                This will only run the given provisioners.
            </summary>
            <value>Providers to run. Omit the leading `:`</value>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantProvisionerSettings.GetToolArguments">
            <summary>
                Gets the command arguments corresponding to the specified <see cref="T:Cake.Vagrant.IVagrantCommandSettings" />
            </summary>
            <returns>An action to add required command arguments</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantProvisionerSettingsExtensions">
            <summary>
                Fluent extension methods to the <see cref="T:Cake.Vagrant.Settings.VagrantProvisionerSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantProvisionerSettingsExtensions.RunProvisioners(Cake.Vagrant.Settings.VagrantProvisionerSettings,System.Boolean)">
            <summary>
                Force the provisioners to run during the operation
            </summary>
            <param name="settings">The settings</param>
            <param name="run"><c>true</c> to run provisioners, <c>false</c> to skip</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantProvisionerSettingsExtensions.WithProvisioners(Cake.Vagrant.Settings.VagrantProvisionerSettings,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Adds the given provisioners to run during the operation
            </summary>
            <param name="settings">The settings</param>
            <param name="provisioners">List of provisioner names to run</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantProvisionerSettingsExtensions.WithProvisioners(Cake.Vagrant.Settings.VagrantProvisionerSettings,System.String[])">
            <summary>
                Adds the given provisioners to run during the operation
            </summary>
            <param name="settings">The settings</param>
            <param name="provisioners">Collection of provisioner names to run</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings">
            <summary>
                Additional settings for the <c>vagrant snapshot restore</c> command.
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings.#ctor(System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings" /> class
            </summary>
            <param name="enableNoDeleteOption">Whether to include the "--no-delete" argument as a valid argument</param>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings.RunProvisioners">
            <summary>
                Force the provisioners to run (or prevent them from doing so).
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings.DoNotDelete">
            <summary>
                Prevents deletion of the snapshot after restoring (so that you can restore to the same point again later).
            </summary>
            <remarks>Only supported by some commands</remarks>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings.GetToolArguments">
            <summary>
                Gets the command arguments corresponding to the specified <see cref="T:Cake.Vagrant.IVagrantCommandSettings" />
            </summary>
            <returns>An action to add required command arguments</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantSnapshotRestoreSettingsExtensions">
            <summary>
                Fluent extension methods for the <see cref="T:Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantSnapshotRestoreSettingsExtensions.RunProvisioners(Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings,System.Boolean)">
            <summary>
                Force the provisioners to run (or prevent them from doing so).
            </summary>
            <param name="settings">The settings</param>
            <param name="run">Whether to force provisioners to run. Defaults to <c>true</c></param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantSnapshotRestoreSettingsExtensions.DoNotDelete(Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings)">
            <summary>
                Prevents deletion of the snapshot after restoring (so that you can restore to the same point again later).
            </summary>
            <param name="settings">The settings</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantSnapshotRestoreSettingsExtensions.Delete(Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings,System.Boolean)">
            <summary>
                Forces deletion of the snapshot after restoring
            </summary>
            <remarks>Opposite of <see cref="M:Cake.Vagrant.Settings.VagrantSnapshotRestoreSettingsExtensions.DoNotDelete(Cake.Vagrant.Settings.VagrantSnapshotRestoreSettings)" />, included for more logical invocation</remarks>
            <param name="settings">The settings</param>
            <param name="delete">Whether to delete the snapshot. Defaults to <c>true</c>.</param>
            <returns></returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantSSHSettings">
            <summary>
                Additional settings for the <c>vagrant ssh</c> command
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantSSHSettings.Command">
            <summary>
                The command to run on your machine.
            </summary>
            <remarks>This is mandatory! Without it, script execution will block!</remarks>
            <value>This value will be quoted when invoked.</value>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantSSHSettings.DoNotAuthenticate">
            <summary>
                OBSOLETE: Setting this will cause unexpected results and may block scripts.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantSSHSettings.ExtraSSHArguments">
            <summary>
                Extra arguments to provide directly to the SSH command
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantSSHSettings.GetToolArguments">
            <summary>
                Gets the command arguments corresponding to the specified <see cref="T:Cake.Vagrant.IVagrantCommandSettings" />
            </summary>
            <returns>An action to add required command arguments</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantSSHSettingsExtensions">
            <summary>
                Fluent extension methods to the <see cref="T:Cake.Vagrant.Settings.VagrantSSHSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantSSHSettingsExtensions.RunCommand(Cake.Vagrant.Settings.VagrantSSHSettings,System.String)">
            <summary>
                Sets the command to run in the SSH session
            </summary>
            <param name="settings">The settings</param>
            <param name="command">REQUIRED: The command to run in the session.</param>
            <returns></returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantSSHSettingsExtensions.WithArguments(Cake.Vagrant.Settings.VagrantSSHSettings,System.String[])">
            <summary>
                Sets any additional arguments to pass directly to the SSH invocation
            </summary>
            <param name="settings">The settings</param>
            <param name="args">Arbitrary arguments to pass to ssh</param>
            <returns></returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantUpSettings">
            <summary>
                Additional settings for the <c>vagrant up</c> command
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantUpSettings.DestroyOnError">
            <summary>
                Destroy the newly created machine if a fatal, unexpected error occurs.
                This will only happen on the first vagrant up.
                By default this is set.
            </summary>
            <value><c>true</c> to destroy the machine. Defaults to <c>true</c></value>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantUpSettings.InstallProvider">
            <summary>
                If the requested provider is not installed, Vagrant will attempt to automatically install it if it can. By default
                this is enabled.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantUpSettings.Parallel">
            <summary>
                Bring multiple machines up in parallel if the provider supports it. Please consult the provider documentation to
                see if this feature is supported.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantUpSettings.Provider">
            <summary>
                Bring the machine up with the given provider. By default this is "virtualbox".
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantUpSettings.RunProvisioners">
            <summary>
                Force the provisioners to run.
            </summary>
        </member>
        <member name="P:Cake.Vagrant.Settings.VagrantUpSettings.Provisioners">
            <summary>
                This will only run the given provisioners.
            </summary>
            <value>Providers to run. Omit the leading `:`</value>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantUpSettings.GetToolArguments">
            <summary>
                Gets the command arguments corresponding to the specified <see cref="T:Cake.Vagrant.IVagrantCommandSettings" />
            </summary>
            <returns>An action to add required command arguments</returns>
        </member>
        <member name="T:Cake.Vagrant.Settings.VagrantUpSettingsExtensions">
            <summary>
                Fluent extension methods to the <see cref="T:Cake.Vagrant.Settings.VagrantUpSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantUpSettingsExtensions.UseProvider(Cake.Vagrant.Settings.VagrantUpSettings,System.String)">
            <summary>
                Bring the machine up with the given provider. By default this is "virtualbox".
            </summary>
            <param name="settings">The setings</param>
            <param name="provider">Name of the provider to use (e.g. <c>"hyperv"</c>)</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantUpSettingsExtensions.RunProvisioners(Cake.Vagrant.Settings.VagrantUpSettings,System.Boolean)">
            <summary>
                Force the provisioners to run when bringing up the machine
            </summary>
            <param name="settings">The settings</param>
            <param name="run"><c>true</c> to run provisioners</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantUpSettingsExtensions.WithProvisioners(Cake.Vagrant.Settings.VagrantUpSettings,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                This will only run the given provisioners when bringing up the machine
            </summary>
            <param name="settings">The settings</param>
            <param name="provisioners">List of provisioner names to run</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantUpSettingsExtensions.WithProvisioners(Cake.Vagrant.Settings.VagrantUpSettings,System.String[])">
            <summary>
                This will only run the given provisioners when bringing up the machine
            </summary>
            <param name="settings">The settings</param>
            <param name="provisioners">Collection of provisioner names to run</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantUpSettingsExtensions.EnableParallel(Cake.Vagrant.Settings.VagrantUpSettings)">
            <summary>
                Bring multiple machines up in parallel if the provider supports it.
            </summary>
            <remarks>Please consult the provider documentation to see if this feature is supported.</remarks>
            <param name="settings">The settings</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantUpSettingsExtensions.InstallProvider(Cake.Vagrant.Settings.VagrantUpSettings,System.Boolean)">
            <summary>
                Instructs Vagrant to attempt to install the chosen provider if it is not installed.
            </summary>
            <param name="settings">The settings</param>
            <param name="install"><c>true</c> to enable automatic installation. By default this is enabled.</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.Vagrant.Settings.VagrantUpSettingsExtensions.DestroyOnError(Cake.Vagrant.Settings.VagrantUpSettings,System.Boolean)">
            <summary>
                Destroy the newly created machine if a fatal, unexpected error occurs.
                This will only happen on the first vagrant up.
            </summary>
            <param name="settings">The settings</param>
            <param name="destroy">><c>true</c> to destroy the machine. Defaults to <c>true</c></param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.Vagrant.VagrantAliases">
            <summary>
                Gets a runner to control Vagrant through the CLI. See the documentation on GitHub for a full API reference.
            </summary>
            <example>
            <code>
            <![CDATA[
            Vagrant.Init("hashicorp/precise64");
            Vagrant.Up(s => s.UseProvider("virtualbox"));
            Vagrant.Suspend();
            Vagrant.Halt();
            Vagrant.Destroy();
            ]]>
            </code>
            </example>
            <remarks>Roughly equivalent to the <c>vagrant</c> command.</remarks>
        </member>
        <member name="M:Cake.Vagrant.VagrantAliases.Vagrant(Cake.Core.ICakeContext)">
            <summary>
                Gets a runner to control Vagrant through the CLI
            </summary>
            <remarks>Roughly equivalent to the <c>vagrant</c> command.</remarks>
            ///
            <example>
                <para>Run `vagrant up`:</para>
                <code>
            <![CDATA[
            Task("Up")
                .Does(() => {
                    Vagrant.Up();
            });
            ]]></code>
                <para>Init using fluent API:</para>
                <code>
            <![CDATA[
            Task("Fluent-Init")
            .Does(() => {
                
                Vagrant.Init("hashicorp/precise64", settings => 
                    settings.ConstrainVersion("1.0.1")
                    .CreateMinimal()
                    .OutputToFile("base.box"));
            });
            ]]></code>
            </example>
        </member>
        <member name="T:Cake.Vagrant.VagrantRunner">
            <summary>
                Wrapper around Vagrant's CLI functionality for creating, starting and managing VMs
            </summary>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
                Initializes a new instance of the <see cref="T:Cake.Vagrant.VagrantRunner" /> class
            </summary>
            <param name="fileSystem">The file system</param>
            <param name="environment">The environment</param>
            <param name="processRunner">The process runner</param>
            <param name="tools">The tool locator</param>
            <param name="log">Logging handler</param>
        </member>
        <member name="P:Cake.Vagrant.VagrantRunner.Box">
            <summary>
                Provides access to `vagrant box` subcommands
            </summary>
        </member>
        <member name="P:Cake.Vagrant.VagrantRunner.Snapshot">
            <summary>
                Provides access to `vagrant snapshot` subcommands
            </summary>
        </member>
        <member name="P:Cake.Vagrant.VagrantRunner.Docker">
            <summary>
                Provides access to `vagrant docker` subcommands
            </summary>
        </member>
        <member name="P:Cake.Vagrant.VagrantRunner.Plugin">
            <summary>
                Provides access to `vagrant plugin` subcommands
            </summary>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.GetToolName">
            <summary>Gets the name of the tool.</summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.GetAlternativeToolPaths(Cake.Vagrant.VagrantSettings)">
            <summary>
                Gets alternative file paths which the tool may exist in
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.GetToolExecutableNames">
            <summary>Gets the possible names of the tool executable.</summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.GetWorkingDirectory(Cake.Vagrant.VagrantSettings)">
            <summary>
                Gets the working directory.
                Defaults to the currently set working directory.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The working directory for the tool.</returns>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.FromPath(Cake.Core.IO.DirectoryPath)">
            <summary>
                Sets the working directory for vagrant commands
            </summary>
            <param name="path">The directory path to run vagrant commands from</param>
            <returns>The command runner</returns>
            <example>
                <code><![CDATA[
            Vagrant.FromPath("./path/to/dir").Up();
            ]]></code>
            </example>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Init(System.String,System.Action{Cake.Vagrant.Settings.VagrantInitSettings})">
            <summary>
                This initializes the current directory to be a Vagrant environment by creating an initial Vagrantfile if one does
                not already exist.
            </summary>
            <param name="name">Will prepopulate the config.vm.box setting in the created Vagrantfile with the specified name</param>
            <param name="configure">Settings to control the initialising process</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Init(System.String,System.String,System.Action{Cake.Vagrant.Settings.VagrantInitSettings})">
            <summary>
                Initializes the current directory for Vagrant by creating an initial Vagrantfile
            </summary>
            <param name="name"></param>
            <param name="url"></param>
            <param name="configure"></param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Up(System.String)">
            <summary>
                This command creates and configures guest machines according to your Vagrantfile, using the default settings
            </summary>
            <param name="name">Optional name of the machine to start</param>
            <example>
                <para>Use defaults</para>
                <code>
            <![CDATA[
            Vagrant.Up();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Up(System.Action{Cake.Vagrant.Settings.VagrantUpSettings})">
            <summary>
                This command creates and configures the default machine according to your Vagrantfile, and the specified settings
            </summary>
            <param name="configure">Settings to use when starting your machine</param>
            <example>
                <code>
            <![CDATA[
            Vagrant.Up(settings =>
                        settings.DestroyOnError()
                        .InstallProvider()
                        .WithProvisioners("chef", "shell")
                        .EnableParallel()
                        .UseProvider("hyperv"));
            ]]></code>
            </example>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Up(System.String,System.Action{Cake.Vagrant.Settings.VagrantUpSettings})">
            <summary>
                This command creates and configures guest machines according to your Vagrantfile, and the specified settings.
            </summary>
            <param name="name">Name of the machine to create</param>
            <param name="configure">Settings to use when creating your machine</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.SSH(System.Action{Cake.Vagrant.Settings.VagrantSSHSettings})">
            <summary>
                This command opens an SSH connection to your default machine to run the provided command
            </summary>
            <param name="configure">Settings to use when connecting</param>
            <example>
                <code>
            <![CDATA[
            Vagrant.SSH(s => s.RunCommand("echo echo"));
            ]]></code>
            </example>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.SSH(System.String,System.Action{Cake.Vagrant.Settings.VagrantSSHSettings})">
            <summary>
                This command opens an SSH connection to the specified machine to run the provided command
            </summary>
            <param name="name">Name of the machine to start</param>
            <param name="configure">Settings to use when connecting</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.PowerShell(System.Action{Cake.Vagrant.Settings.VagrantPowerShellSettings})">
            <summary>
                This command opens a PowerShell connection to your default machine to run the provided command
            </summary>
            <param name="configure">Settings to use when connecting</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.PowerShell(System.String,System.Action{Cake.Vagrant.Settings.VagrantPowerShellSettings})">
            <summary>
                This command opens a PowerShell connection to the specified machine to run the provided command
            </summary>
            <param name="name">Name of the machine to start</param>
            <param name="configure">Settings to use when connecting</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Reload(System.String)">
            <summary>
                The equivalent of running a halt followed by an up.
            </summary>
            <remarks>This command is usually required for changes made in the Vagrantfile to take effect.</remarks>
            <param name="name">Optional name of the machine to reload</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Reload(System.Action{Cake.Vagrant.Settings.VagrantProvisionerSettings})">
            <summary>
                The equivalent of running a halt followed by an up.
            </summary>
            <remarks>This command is usually required for changes made in the Vagrantfile to take effect.</remarks>
            <param name="configure">Settings to control the execution of provisioners</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Reload(System.String,System.Action{Cake.Vagrant.Settings.VagrantProvisionerSettings})">
            <summary>
                The equivalent of running a halt followed by an up.
            </summary>
            <remarks>This command is usually required for changes made in the Vagrantfile to take effect.</remarks>
            <param name="name">Name of the machine to reload</param>
            <param name="configure">Settings to control the execution of provisioners</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Resume(System.String)">
            <summary>
                This resumes a Vagrant managed machine that was previously suspended.
            </summary>
            <param name="name">Optional name of the machine to resume</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Resume(System.Action{Cake.Vagrant.Settings.VagrantProvisionerSettings})">
            <summary>
                This resumes a Vagrant managed machine that was previously suspended.
            </summary>
            <param name="configure">Settings to control the execution of provisioners</param>
            <example>
                <code><![CDATA[
            Vagrant.Resume(settings => settings.WithProvisioners("shell"));
            ]]></code>
            </example>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Resume(System.String,System.Action{Cake.Vagrant.Settings.VagrantProvisionerSettings})">
            <summary>
                This resumes a Vagrant managed machine that was previously suspended.
            </summary>
            <param name="name">Name of the machine to resume</param>
            <param name="configure">Settings to control the execution of provisioners</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Destroy(System.String)">
            <summary>
                This command stops the running machine Vagrant is managing and destroys all resources that were created during the
                machine creation process.
            </summary>
            <param name="name">Optional name of the machine to destroy</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Halt(System.String,System.Boolean)">
            <summary>
                This command shuts down the running machine Vagrant is managing.
            </summary>
            <param name="name">Optional name of the machine to halt</param>
            <param name="force">Whether to forcefully halt the machine (equivalent to pulling the power)</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Suspend(System.String)">
            <summary>
                This suspends the guest machine Vagrant is managing, rather than shutting it down
            </summary>
            <remarks>
                A suspend effectively saves the exact point-in-time state of the machine, so that when you resume it later, it
                begins running immediately from that point, rather than doing a full boot.
            </remarks>
            <param name="name">Optional name of the machine to suspend</param>
            <example>
                <code><![CDATA[Vagrant.Suspend();]]></code>
            </example>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Package(System.String)">
            <summary>
                This packages a currently running VirtualBox environment into a re-usable box.
            </summary>
            <remarks>
                This command can only be used with other providers based on the provider implementation and if the provider
                supports it.
            </remarks>
            <param name="name">Optional name of the machine to package</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Package(System.Action{Cake.Vagrant.Settings.VagrantPackageSettings})">
            <summary>
                This packages a currently running VirtualBox environment into a re-usable box.
            </summary>
            <remarks>
                This command can only be used with other providers based on the provider implementation and if the provider
                supports it.
            </remarks>
            <param name="configure">Settings to use when packaging the box</param>
        </member>
        <member name="M:Cake.Vagrant.VagrantRunner.Package(System.String,System.Action{Cake.Vagrant.Settings.VagrantPackageSettings})">
            <summary>
                This packages a currently running VirtualBox environment into a re-usable box.
            </summary>
            <remarks>
                This command can only be used with other providers based on the provider implementation and if the provider
                supports it.
            </remarks>
            <param name="name">Name of the machine to package</param>
            <param name="configure">Settings to use when packaging the box</param>
        </member>
        <member name="T:Cake.Vagrant.VagrantSettings">
            <summary>
                Settings to invoke the Vagrant CLI
            </summary>
        </member>
        <member name="M:Cake.Vagrant.IVagrantCommandSettings.GetToolArguments">
            <summary>
                Gets the command arguments corresponding to the specified <see cref="T:Cake.Vagrant.IVagrantCommandSettings" />
            </summary>
            <returns>An action to add required command arguments</returns>
        </member>
    </members>
</doc>
